              1 
            /  |  \
           2   3   4
              / \
             6   7 

Root 1
Parent 1 3  
Child  2 3 4 6 7
Leaf 2 4 6 7
Siling  2 3 4 6 7

DOM, comentários do Facebook ou Instagram, arvores genealógicas são exemplos de uma arvore.
Abstract Syntax Tree 

BINARY TREE 
Cada nó pode ter apenas 0, 1 ou 2 nós.
Cada filho só pode ter 1 pai.

Perfect Binary Tree x Full Binary Tree
Procurar visualização de ambos no google.
No Perfect: a cada nivel, o número dobra.
Metade dos nós está no fim.

lookup O(log N)
insert O(log N)
delete O(log N)

Descobrir quantos nós: 
2^h (height of the tree, os levels) - 1;
log nodes = height


Divide & Conquer - O(Log n) é como isso - Lembrar do exemplo da procura da página do livro 

----------------------------------------------------------------

BINARY SEARCH TREE 

lookup O(log N)
insert O(log N)
delete O(log N)

São ótimos para comparar as coisas.
Preserva os relacionamentos, ao contrário do hash table.
Exemplo: você quer uma pasta pai, uma subpasta ....

            101
          /    \ 
        33       105
      /   \     /   \
     9    37   104  144

1) Nós filhos à direita do nó raiz devem ser maior que o nó atual 
2) Só pode ter dos nós filhos

Pros: Better than O(n)
      Ordered
      Flexible size
Cons: No O(1) operations 

----------------------------------------------------------------

BALANCED X UNBALANCED BST 

A operação de um unbalanced bst é O(n), o que é pior que o balanceado O(log n)

Como balancear uma arvore? AVL, Red Black

----------------------------------------------------------------

https://visualgo.net/en/bst?slide=1